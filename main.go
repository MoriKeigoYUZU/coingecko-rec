package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"time"

	_struct "github/MoriKeigoYUZU/coingecko-rec/struct"

	"github.com/gin-gonic/gin"
)

func main() {
	gin.SetMode(gin.ReleaseMode)
	r := gin.Default()

	r.GET("/", func(c *gin.Context) {
		apiID := "axie-infinity"

		url := "https://api.coingecko.com/api/v3/coins/" + apiID + "?tickers=false&market_data=true&community_data=false&developer_data=false&sparkline=false"

		req, err := http.NewRequest("GET", url, nil)
		if err != nil {
			log.Fatal(err)
		}

		client := &http.Client{}

		resp, err := client.Do(req)
		if err != nil {
			log.Fatal(err)
		}

		defer resp.Body.Close()

		body, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			log.Fatal(err)
		}

		var data _struct.AutoGenerated
		err = json.Unmarshal(body, &data)
		if err != nil {
			log.Fatal(err)
		}

		printJPY(data)

		c.JSON(http.StatusOK, data)
	})

	go func() {
		if err := r.Run(":8080"); err != nil {
			log.Fatal(err)
		}
	}()

	fmt.Println("API started")

	select {}
}

func printJPY(data _struct.AutoGenerated) {
	fmt.Println()
	fmt.Println()
	fmt.Println("Token NAME:", data.Localization.Ja)
	fmt.Println("TIME:", data.LastUpdated.In(time.FixedZone("Asia/Tokyo", 9*60*60)))
	fmt.Println("JPY:", data.MarketData.CurrentPrice.Jpy)
	fmt.Println()
	fmt.Println()
}
